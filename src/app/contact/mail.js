// ====================
// CONFIGURATION INITIALE
// ====================

// V√©rifie que Firebase est bien charg√© dans la page
if (typeof firebase === "undefined") {
  console.error("Firebase n'est pas charg√© ! V√©rifiez les scripts import√©s");
} else {
  console.log("Firebase d√©tect√©, version:", firebase.SDK_VERSION);
}

// Initialise la base de donn√©es Firebase Realtime
const database = firebase.database();

// Cr√©e une r√©f√©rence vers le n≈ìud "messages"
const messagesRef = database.ref("messages");

// ====================
// TEST DE CONNEXION √Ä FIREBASE
// ====================

// D√©lai maximal de connexion (5 secondes)
let connectionTimeout = setTimeout(() => {
  console.error(
    "üïí Connexion √† Firebase trop longue (v√©rifiez internet/firebaseConfig)"
  );
}, 5000);

// R√©f√©rence sp√©ciale pour v√©rifier si l'utilisateur est connect√© √† Firebase
const connectionRef = database.ref(".info/connected");

// Surveille la connexion √† Firebase
connectionRef.on("value", (snap) => {
  clearTimeout(connectionTimeout); // On annule le timer s‚Äôil y a une r√©ponse

  if (snap.val() === true) {
    console.log("‚úÖ Connect√© √† Firebase | URL:", database.ref().toString());
  } else {
    console.error(
      "‚ùå D√©connect√© de Firebase | V√©rifiez :\n- Les r√®gles de la base\n- La configuration\n- Les bloqueurs de scripts"
    );
  }
});

// ====================
// GESTION DU FORMULAIRE
// ====================

// Quand on soumet le formulaire, ex√©cute la fonction submitForm
document.getElementById("contact-form").addEventListener("submit", submitForm);

// Fonction ex√©cut√©e quand l'utilisateur soumet le formulaire
async function submitForm(e) {
  e.preventDefault(); // Emp√™che la page de recharger

  try {
    // R√©cup√®re et valide les champs du formulaire
    const name = validateInput("name");
    const email = validateInput("email", true);
    const subject = validateInput("subject");
    const message = validateInput("message");

    // Envoie les donn√©es √† Firebase
    await saveMessage(name, email, subject, message);

    // R√©initialise le formulaire
    document.getElementById("contact-form").reset();

    // Affiche un message de succ√®s
    showAlert("Message envoy√© avec succ√®s !", "success");
  } catch (error) {
    // Affiche une erreur si quelque chose ne va pas
    console.error("Erreur lors de l'envoi:", error);
    showAlert("Erreur d'envoi : " + error.message, "error");
  }
}

// ====================
// FONCTIONS UTILES
// ====================

// Enregistre un message dans la base de donn√©es
async function saveMessage(name, email, subject, message) {
  // V√©rifie si l'utilisateur est bien connect√© √† Firebase
  if (!(await checkConnection())) {
    throw new Error("Pas de connexion √† Firebase");
  }

  // Cr√©e une nouvelle entr√©e dans "messages"
  const newMessageRef = messagesRef.push();

  // Sauvegarde les donn√©es dans Firebase
  await newMessageRef.set({
    name: name,
    email: email,
    subject: subject,
    message: message,
    timestamp: firebase.database.ServerValue.TIMESTAMP, // Heure du serveur
    ip: await fetchIP(), // Adresse IP de l'utilisateur (optionnelle)
  });
}

// V√©rifie un champ du formulaire (et le format s'il s'agit d'un email)
function validateInput(id, isEmail = false) {
  const value = document.getElementById(id).value.trim();

  if (!value) {
    throw new Error(`Le champ ${id} est requis`);
  }

  // V√©rifie que l'email a un bon format
  if (isEmail && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
    throw new Error("Email invalide");
  }

  return value;
}

// Affiche un message temporaire (alerte)
function showAlert(message, type = "success") {
  const alert = document.createElement("div");
  alert.textContent = message;

  // Style de l'alerte
  alert.style.position = "fixed";
  alert.style.bottom = "20px";
  alert.style.right = "20px";
  alert.style.padding = "15px 25px";
  alert.style.borderRadius = "4px";
  alert.style.color = "white";
  alert.style.zIndex = "1000";
  alert.style.animation = "fadeIn 0.3s";

  // Couleur selon le type d'alerte (vert ou rouge)
  alert.style.background = type === "success" ? "#4CAF50" : "#f44336";

  // Ajoute l'alerte √† la page
  document.body.appendChild(alert);

  // Supprime l'alerte apr√®s 3 secondes
  setTimeout(() => {
    alert.style.animation = "fadeOut 0.5s";
    setTimeout(() => alert.remove(), 500);
  }, 3000);
}

// ====================
// FONCTIONS AVANC√âES
// ====================

// V√©rifie si l'utilisateur est connect√© √† Firebase
async function checkConnection() {
  return new Promise((resolve) => {
    const ref = database.ref(".info/connected");
    ref
      .once("value")
      .then((snap) => resolve(snap.val() === true))
      .catch(() => resolve(false));
  });
}

// R√©cup√®re l'adresse IP publique de l'utilisateur
async function fetchIP() {
  try {
    const response = await fetch("https://api.ipify.org?format=json");
    const data = await response.json();
    return data.ip;
  } catch {
    return "unknown";
  }
}

// ====================
// ANIMATIONS CSS POUR LES ALERTES
// ====================

// Ajoute dynamiquement des animations CSS dans la page
const style = document.createElement("style");
style.textContent = `
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    @keyframes fadeOut {
        from { opacity: 1; transform: translateY(0); }
        to { opacity: 0; transform: translateY(20px); }
    }
`;
document.head.appendChild(style);
function verfier() {
  // declaration les champ input
  const name = document.getElementById("name").value;
  const email = document.getElementById("email").value;
  const subject = document.getElementById("subject").value;
  const message = document.getElementById("message").value;
  // V√©rification le champ name est ce que vide ou non et le contenu est ce que almphabitique ou non
  if (name === "" || !/^[a-zA-Z\s]+$/.test(name)) {
    alert("Veuillez entrer un nom valide (lettres uniquement).");
    return false;
  }
  // V√©rification le champ email est ce que vide ou non et le contenu est ce que valide ou non
  if (email === "" || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
    alert("Veuillez entrer une adresse e-mail valide.");
    return false;
  }
  // V√©rification le champ subject est ce que vide ou non et le contenu est ce que valide ou non
  if (subject === "" || subject.length < 5) {
    alert("Le sujet doit contenir au moins 5 caract√®res.");
    return false;
  }
  // V√©rification le champ message est ce que vide ou non et le contenu est ce que valide ou non
  if (message === "" || message.length < 10) {
    alert("Le message doit contenir au moins 10 caract√®res.");
    return false;
  }
  // Si tous les champs sont valides, on peut envoyer le message
  alert("Message envoy√© avec succ√®s !");
}
